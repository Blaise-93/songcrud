<section class="text-gray-700 body-font">
	<div
		class="container mx-auto flex px-5 py-24 items-center justify-center flex-col">
		<img
			class="border-top justify-between lg:w-2/6 md:w-3/6 w-5/6 mb-10 object-cover object-center rounded"
			alt="hero"
		   src="https://djmix.com.ng/wp-content/uploads/2020/02/naija-2020-party-mix-latest-naij-1140x641.jpg" />
		<div class="text-center lg:w-2/3 w-full">
			<h1
				class="title-font sm:text-4xl text-3xl mb-4 font-medium text-gray-900">
				CRM built with Django
			</h1>
			<p class="mb-8 leading-relaxed">
				This will manage your Artiste, Lyrics and Song selection. Enjoy!
			</p>
			<div class="flex justify-center">
				<button
					class="inline-flex text-white bg-indigo-500 border-0 py-2 px-6 focus:outline-none hover:bg-indigo-600 rounded text-lg">
					Button
				</button>
				<button
					class="ml-4 inline-flex text-gray-700 bg-gray-100 border-0 py-2 px-6 focus:outline-none hov er:bg-gray-200 rounded text-lg">
					Button
				</button>
			</div>
		</div>
	</div>
</section>
{% endblock content%}

from views:

def album_create(request):
    form = AlbumModelForm()  # we reassign the data if not validated
    if request.method == 'POST':
        print('Receiving a post request')
        form = AlbumModelForm(request.POST)
        # we can check if form is valid
        if form.is_valid():
            form.save()
            print('The album has been created.')
            return redirect('/album')  # redirect us back to our homepage
    context = {
        'form': form
    }
    return render(request, 'album/album_create.html', context)

# Update a lead using existing form


def album_update(request, pk):
    artiste = Artiste.objects.get(pk=pk)
    form = AlbumModelForm(instance=artiste)
    if request.method == 'POST':
        form = AlbumModelForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('/album')
    context = {
        'form': form,
        'artiste': artiste
    }
    return render(request, 'album/album_update.html', context)


"""
def album_update(request, pk):
    artiste = Artiste.objects.get(id=pk)
    form = AlbumForm()
    if request.method == 'POST':
        form = AlbumForm(request.POST)
       # we can check if form is valid
        if form.is_valid():
            print('The form is valid')
            print(form.cleaned_data)
            first_name = form.cleaned_data['first_name']
            last_name = form.cleaned_data['last_name']
            age = form.cleaned_data['age']
            artiste.first_name = first_name
            artiste.last_name = last_name
            artiste.age = age
            artiste.first_name = first_name
            artiste.save()  # commit the changes to database to update

            return redirect('/album')  # redirect us back to our homepage
    context = {
        'form': form,
        'artiste': artiste
    }
    return render(request, 'album/album_update.html', context)
"""


# def album_create(request):
#  # if request.method == 'POST':
#        form = AlbumForm(request.POST)
#       # we can check if form is valid
#       if form.is_valid():
#           print('The form is valid')
#           print(form.cleaned_data)
#           first_name = form.cleaned_data['first_name']
#           last_name = form.cleaned_data['last_name']
#           age = form.cleaned_data['age']
#           song = Song.objects.first()  # created a first instance of song variable
#           lyric = Lyric.objects.first()
#          Artiste.objects.create(
#               first_name=first_name,
#               last_name=last_name,
#               age=age,
#               song=song,
#               lyric=lyric
#         )
#          print('The album has been created.')
#          return redirect('/album')  # redirect us back to our homepage
#  context = {
#       'form': form
#  }

#  return render(request, 'album/album_create.html', context)

